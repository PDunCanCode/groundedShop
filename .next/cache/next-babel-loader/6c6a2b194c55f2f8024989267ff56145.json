{"ast":null,"code":"import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nconst handleGetRequest = async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    // console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};\n\nconst handlePutRequest = async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    });\n    const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product));\n\n    if (productExists) {\n      await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.product\": productId\n      }, {\n        $inc: {\n          \"prodcts.$.quantity\": quantity\n        }\n      });\n    } else {\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      await Cart.findByIdAndUpdate({\n        _id: cart._id\n      }, {\n        $addToSet: {\n          products: newProduct\n        }\n      });\n    }\n\n    res.status(200).send(\"Cart updated\");\n  } catch (error) {\n    // console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};\n\nconst handleDeleteRequest = async (req, res) => {\n  const {\n    productId\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        products: {\n          product: productId\n        }\n      }\n    }, {\n      new: true\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};","map":{"version":3,"sources":["C:/Users/David/Desktop/shoponix/pages/api/cart.js"],"names":["mongoose","jwt","Cart","connectDb","ObjectId","Types","req","res","method","handleGetRequest","handlePutRequest","handleDeleteRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","cart","findOne","user","populate","path","model","json","products","error","quantity","productId","body","productExists","some","doc","equals","product","findOneAndUpdate","_id","$inc","newProduct","findByIdAndUpdate","$addToSet","query","$pull","new","console"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\n\nconnectDb();\n\nconst { ObjectId } = mongoose.Types\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"PUT\":\n            await handlePutRequest(req, res);\n            break;\n        case \"DELETE\":\n            await handleDeleteRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`);\n            break;\n    }\n}\n\nconst handleGetRequest = async (req, res) => {\n    if (!(\"authorization\" in req.headers)){\n        return res.status(401).send(\"Not authenticated\");\n    }\n    try {\n        const {userId} = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n        const cart = await Cart.findOne({ user: userId }).populate({\n            path: \"products.product\",\n            model: \"Product\"\n        });\n        res.status(200).json(cart.products);\n    } catch (error) {\n        // console.error(error);\n        res.status(403).send(\"Please login\");\n    }\n}\n\nconst handlePutRequest = async (req, res) => {\n    const { quantity, productId } = req.body;\n    if (!(\"authorization\" in req.headers)){\n        return res.status(401).send(\"Not authenticated\");\n    }\n    try {\n        const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n        const cart = await Cart.findOne({ user: userId });\n        const productExists = cart.products.some(doc => ObjectId(productId).equals (doc.product));\n        if(productExists){\n            await Cart.findOneAndUpdate(\n                { _id: cart._id, \"products.product\":  productId},\n                { $inc: { \"prodcts.$.quantity\": quantity } }\n            )\n        } else {\n            const newProduct = { quantity, product: productId };\n            await Cart.findByIdAndUpdate(\n                { _id: cart._id },\n                { $addToSet: { products: newProduct } }\n            )\n        }\n\n        res.status(200).send(\"Cart updated\");\n        \n    } catch (error) {\n        // console.error(error);\n        res.status(403).send(\"Please login\");\n    }\n}\n\nconst handleDeleteRequest = async (req, res) => {\n    const {productId} = req.query;\n    if (!(\"authorization\" in req.headers)){\n        return res.status(401).send(\"Not authenticated\");\n    }\n    try {\n        const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n        const cart = await Cart.findOneAndUpdate(\n            {user: userId},\n            {$pull: {products: {product: productId}}},\n            {new: true}\n        ).populate({\n            path: \"products.product\",\n            model: \"Product\"\n        });\n        res.status(200).json(cart.products);\n    } catch (error) {\n        console.error(error);\n        res.status(403).send(\"Please login\");\n    }\n}"]},"metadata":{},"sourceType":"module"}