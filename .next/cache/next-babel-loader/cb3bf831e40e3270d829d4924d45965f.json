{"ast":null,"code":"import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nexport default (async (req, res) => {\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products);\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id;\n    await stripe.charges.create({\n      currency: \"usd\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      idempotency_key: uuidv4()\n    });\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    }).save();\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    });\n    res.status(200).send(\"Checkout successful!\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error proccessing charge\");\n  }\n});","map":{"version":3,"sources":["C:/Users/David/Desktop/shoponix/pages/api/checkout.js"],"names":["Stripe","uuidv4","jwt","Cart","Order","calculateCartTotal","stripe","process","env","STRIPE_SECRET_KEY","req","res","paymentData","body","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","products","prevCustomer","customers","list","email","limit","isExistingCustomer","data","length","newCustomer","create","source","id","customer","charges","currency","amount","receipt_email","description","idempotency_key","total","save","findOneAndUpdate","_id","$set","status","send","error","console"],"mappings":"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","sourcesContent":["import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\n\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\n\nexport default async (req, res) => {\n    const { paymentData } = req.body;\n\n    try {\n        const {userId} = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n        const cart = await Cart.findOne({ user: userId }).populate({\n            path: \"products.product\",\n            model: \"Product\"\n        });\n        const {cartTotal, stripeTotal} = calculateCartTotal(cart.products);\n        const prevCustomer = await stripe.customers.list({\n            email: paymentData.email,\n            limit: 1\n        });\n        const isExistingCustomer = prevCustomer.data.length > 0;\n        let newCustomer;\n        if(!isExistingCustomer){\n            newCustomer = await stripe.customers.create({\n                email: paymentData.email,\n                source: paymentData.id\n            });\n        }\n        const customer = (isExistingCustomer && prevCustomer.data[0].id) || newCustomer.id;\n        await stripe.charges.create({\n            currency: \"usd\",\n            amount: stripeTotal,\n            receipt_email: paymentData.email,\n            customer,\n            description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n        },{\n            idempotency_key: uuidv4()\n        });\n\n        await new Order({\n            user: userId,\n            email: paymentData.email,\n            total: cartTotal,\n            products: cart.products\n        }).save();\n\n        await Cart.findOneAndUpdate(\n            {_id: cart._id},\n            {$set: {products: []}}\n        )\n\n        res.status(200).send(\"Checkout successful!\");\n    } catch (error) {\n        console.error(error);\n        res.status(500).send(\"Error proccessing charge\");\n    }\n}"]},"metadata":{},"sourceType":"module"}